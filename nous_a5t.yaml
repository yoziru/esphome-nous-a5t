substitutions:
  friendly_name: "Nous A5T"
  device_name: "nous-a5t"
  device_description: Energy Monitoring Smart Power Strip with 3 controlled plugs and 3 USB ports

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  comment: ${device_description}
  platform: ESP8266
  board: esp8285
  on_boot:
    # hack to ensure switch turns on after reboot
    then:
      - switch.turn_on: relay1
      - switch.turn_on: relay2
      - switch.turn_on: relay3
      - switch.turn_on: relay4
      - switch.template.publish:
          id: button_switch1
          state: ON
      - switch.template.publish:
          id: button_switch2
          state: ON
      - switch.template.publish:
          id: button_switch3
          state: ON
      - switch.template.publish:
          id: button_switch4
          state: ON

captive_portal:

# Enable Home Assistant native api
api:

# Enable OTA updates
ota:

# Enable web server
web_server:
  port: 80

# Enable time component to reset energy at midnight
time:
  - platform: sntp
    id: my_time

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

  # AP mode will only enable if no WiFi connection could be made
  ap: 
    ssid: ${friendly_name} - Access Point
    password: !secret wifi_ap_password

logger:
  # level: INFO
  # disable UART logging since we aren't connected to GPIO1 TX
  baud_rate: 0 

uart:
  rx_pin: GPIO3
  baud_rate: 4800

text_sensor:
  - platform: version
    name: "Version"
    icon: mdi:cube-outline
  - platform: wifi_info
    ip_address:
      name: "IP Address"
    mac_address:
      name: "Mac Address"

binary_sensor:
  - platform: status
    name: "Status"
    device_class: connectivity

  - platform: gpio
    pin:
      number: GPIO16
      # mode: INPUT_PULLUP
      inverted: True
    id: "nous_a5t_button_state0"
    on_press:
      - switch.toggle: button_switch1
      - switch.toggle: button_switch2
      - switch.toggle: button_switch3

sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s
    icon: mdi:wifi

  - platform: uptime
    name: "Uptime"
    update_interval: 60s
    icon: mdi:clock-outline

  - platform: total_daily_energy
    name: "Daily Energy"
    power_id: "power"
    filters:
      - multiply: 0.001  # convert Wh to kWh
    unit_of_measurement: kWh
    icon: mdi:calendar-clock

  # Small buttons over ADC - see https://templates.blakadder.com/nous_A5T.html
  - platform: adc
    pin: VCC
    id: a0_vcc
    update_interval: 1s
    internal: true
    on_value_range:
      - below: 4
        then:
          - lambda: !lambda |-
              if (id(a0_vcc).state > 3) {
                id(relay1).toggle();
              } else if (id(a0_vcc).state <= 3 && id(a0_vcc).state > 2) {
                id(relay2).toggle();
              } else {
                id(relay3).toggle();
              }

  - platform: cse7766
    update_interval: 5s
    current:
      name: "Current"
      unit_of_measurement: A
      accuracy_decimals: 3
      icon: mdi:current-ac
      filters:
      # Make everything below 0.01A appear as just 0A.
      # Furthermore it corrects 0.013A for the power usage of the plug.
      - lambda: if (x < (0.01 + 0.013)) return 0; else return (x - 0.013);
    power:
      name: "Power"
      unit_of_measurement: W
      accuracy_decimals: 0
      id: "power"
      icon: mdi:lightning-bolt
      filters:
          # Map from sensor -> measured value
          - calibrate_linear:
            - 0.0 -> 0.0
            - 3.3 -> 14.8
            - 7.1 -> 18.0
            - 18 -> 45
            - 22 -> 54
            - 25 -> 62
            - 54.70 -> 133
            - 238 -> 577
            - 324 -> 784
            - 352 -> 850
            - 618 -> 1486
          # Make everything below 2W appear as just 0W.
          # Furthermore it corrects 1.14W for the power usage of the plug.
          - lambda: if (x < (2 + 1.14)) return 0.0; else return (x - 1.14);
    voltage:
      name: "Voltage"
      unit_of_measurement: V
      accuracy_decimals: 1
      icon: mdi:sine-wave
      filters:
        # Map from sensor -> measured value
        - calibrate_linear:
            - 0.0 -> 0.0
            - 95.5 -> 230.0
    energy:
      name: "Energy"
      unit_of_measurement: Wh
      icon: mdi:calendar-clock
 
light:
  - platform: status_led
    id: led
    pin:
      number: GPIO02
      inverted: true

switch:
  - platform: template
    name: "Switch 1"
    icon: mdi:power-socket-eu
    lambda: |-
      if (id(relay1).state) {
        return true;
      } else {
        return false;
      }
    id: button_switch1
    turn_on_action:
      - switch.turn_on: relay1
    turn_off_action:
      - switch.turn_off: relay1
  - platform: template
    name: "Switch 2"
    icon: mdi:power-socket-eu
    lambda: |-
      if (id(relay2).state) {
        return true;
      } else {
        return false;
      }
    id: button_switch2
    turn_on_action:
      - switch.turn_on: relay2
    turn_off_action:
      - switch.turn_off: relay2
  - platform: template
    name: "Switch 3"
    icon: mdi:power-socket-eu
    lambda: |-
      if (id(relay3).state) {
        return true;
      } else {
        return false;
      }
    id: button_switch3
    turn_on_action:
      - switch.turn_on: relay3
    turn_off_action:
      - switch.turn_off: relay3
  - platform: template
    name: "Switch USB"
    icon: mdi:usb-port
    lambda: |-
      if (id(relay4).state) {
        return true;
      } else {
        return false;
      }
    id: button_switch4
    turn_on_action:
      - switch.turn_on: relay4
    turn_off_action:
      - switch.turn_off: relay4
  - platform: gpio
    pin: GPIO14
    id: relay1
    restore_mode: ALWAYS_ON
  - platform: gpio
    pin: GPIO12
    id: relay2
    restore_mode: ALWAYS_ON
  - platform: gpio
    pin: GPIO13
    id: relay3
    restore_mode: ALWAYS_ON
  - platform: gpio
    pin: GPIO5
    inverted: True
    id: relay4
    restore_mode: ALWAYS_ON
